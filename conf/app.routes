->          /                                                                                 manageDetails.Routes

#Start
GET         /                                                                                 @controllers.Application.start()

GET         /start                                                                            @controllers.Application.start()

GET         /contact-us                                                                       @controllers.Application.contactUs()

#Registration
GET         /login                                                                            @controllers.Login.show
GET         /register                                                                         @controllers.Register.show
POST        /regiser-user                                                                     @controllers.Register.choice
GET         /logout                                                                           @controllers.Application.logOut
GET         /invalid-account                                                                  @controllers.Application.invalidAccountType

#Identity verification
GET         /identity-verification/start                                                      @controllers.IdentityVerification.startIv
GET         /identity-verification/failed                                                     @controllers.IdentityVerification.fail
GET         /identity-verification/restore-session                                            @controllers.IdentityVerification.restoreSession
GET         /identity-verification/success                                                    @controllers.IdentityVerification.success

#Dashboard
GET         /home                                                                             @controllers.Dashboard.home()
GET         /properties                                                                       @controllers.Dashboard.manageProperties(page: Int ?= 1, pageSize: Int ?= 15, requestTotalRowCount: Boolean ?= true, sortfield: Option[String] ?= None, sortorder: Option[String] ?= None, status: Option[String] ?= None, address: Option[String] ?= None, baref: Option[String] ?= None, agent: Option[String] ?= None)
GET         /properties/json                                                                  @controllers.Dashboard.getProperties(page: Int, pageSize: Int, requestTotalRowCount: Boolean, sortfield: Option[String], sortorder: Option[String], status: Option[String], address: Option[String], baref: Option[String], agent: Option[String])
GET         /managed-properties/:agentCode                                                    @controllers.Dashboard.viewManagedProperties(agentCode: Long)
GET         /managed-properties/:agentCode/revoke                                             @controllers.agentAppointment.RevokeAgentController.revokeAgent(authorisationId: Long, authorisedPartyId: Long, agentCode: Long)

GET         /managed-properties/:agentCode/revoke/confirmed                                   @controllers.agentAppointment.RevokeAgentController.revokeAgentConfirmed(authorisationId: Long, authorisedPartyId: Long, agentCode: Long)
GET         /manage-agents                                                                    @controllers.Dashboard.manageAgents()
GET         /messages                                                                         @controllers.Dashboard.viewMessages(pagination: MessagePagination ?= MessagePagination())
GET         /message/:id                                                                      @controllers.Dashboard.viewMessage(id)
GET         /message/:id/pdf                                                                  @controllers.Dashboard.viewMessageAsPdf(id)
GET         /message-count/json                                                               @controllers.Dashboard.messageCountJson
GET         /client-properties/:clientOrganisationId/revoke/:authorisationId                  @controllers.agent.RepresentationController.revokeClient(authorisationId: Long, clientOrganisationId: Long)
GET         /client-properties/:clientOrganisationId/revoke/:authorisationId/confirmed        @controllers.agent.RepresentationController.revokeClientConfirmed(authorisationId: Long, clientOrganisationId: Long)

GET         /property-link/:linkId/assessments                                                @controllers.Assessments.assessments(linkId: Long)
GET         /summary/:uarn                                                                    @controllers.Assessments.viewSummary(uarn: Long)
GET         /detailed/:authorisationId/:assessmentRef                                         @controllers.Assessments.viewDetailedAssessment(authorisationId: Long, assessmentRef: Long, baRef)
GET         /request-detailed/:authorisationId/:assessmentRef                                 @controllers.Assessments.requestDetailedValuation(authorisationId: Long, assessmentRef: Long, baRef)
GET         /already-requested-detailed                                                       @controllers.Assessments.duplicateRequestDetailedValuation(authorisationId: Long, assessmentRef: Long)
GET         /request-detailed/start-challenge                                                 @controllers.Assessments.startChallengeFromDVR(authorisationId: Long, assessmentRef: Long, baRef: String)
POST        /details-requested/:authorisationId/:assessmentRef                                @controllers.Assessments.detailedValuationRequested(authorisationId: Long, assessmentRef: Long, baRef)
GET         /details-requested/:submissionId                                                  @controllers.Assessments.dvRequestConfirmation(submissionId, authorisationId: Long)
POST        /view-assessment-from-list                                                        @controllers.Assessments.submitViewAssessment(authorisationId: Long)
#Challenge
GET         /can-challenge                                                                    @controllers.Assessments.canChallenge(plSubmissionId: String, assessmnetRef: Long, caseRef: String, isAgent: Boolean, authorisationId: Long)

GET         /detailed-valuation/:valuationId/property/:authId/billing/:baRef/exists           @controllers.DvrController.alreadySubmittedDetailedValuationRequest(valuationId: Long, authId: Long, baRef: String)
GET         /detailed-valuation/:valuationId/property/:authId/file/:ref                       @controllers.DvrController.requestDvrFile(valuationId: Long, authId: Long, ref: Long)
GET         /detailed-valuation/:valuationId/property/:authId/billing/:baRef                  @controllers.DvrController.detailedValuationRequestCheck(valuationId: Long, authId: Long, baRef: String)
POST        /detailed-valuation/:valuationId/property/:authId/billing/:baRef/request          @controllers.DvrController.requestDetailedValuation(valuationId: Long, authId: Long, baRef: String)
GET         /detailed-valuation/property/:authId/confirmation/:submissionId                   @controllers.DvrController.confirmation(authId: Long, submissionId: String)

#Search and Link
GET         /property-search                                                                  @controllers.propertyLinking.ClaimProperty.show()
GET         /link-to-property/before-you-start                                                @controllers.propertyLinking.ClaimProperty.checkPropertyLinks()
GET         /link-to-property/:uarn                                                           @controllers.propertyLinking.ClaimProperty.declareCapacity(uarn: Long, address)
GET         /link-to-property                                                                 @controllers.propertyLinking.ClaimProperty.back()
POST        /link-to-property/:uarn                                                           @controllers.propertyLinking.ClaimProperty.attemptLink(uarn: Long, address)

#Link scenarios
GET         /choose-evidence                                                                  @controllers.propertyLinking.ChooseEvidence.show()
POST        /choose-evidence                                                                  @controllers.propertyLinking.ChooseEvidence.submit()
GET         /upload-rates-bill                                                                @controllers.propertyLinking.UploadRatesBill.show(errorCode: Option[Int] ?= None, errorMessage: Option[String] ?= None)
GET         /upload-evidence                                                                  @controllers.propertyLinking.UploadEvidence.show(errorCode: Option[Int] ?= None, errorMessage: Option[String] ?= None)

GET         /summary                                                                          @controllers.propertyLinking.Declaration.show(noEvidenceFlag: Option[Boolean] ?= None)
POST        /summary                                                                          @controllers.propertyLinking.Declaration.submit(noEvidenceFlag: Option[Boolean] ?= None)

GET         /confirmation                                                                     @controllers.propertyLinking.Declaration.confirmation
GET         /confirmation/no-evidence                                                         @controllers.propertyLinking.Declaration.noEvidence

#Linking outcomes
GET         /rates-bill-submitted                                                             @controllers.propertyLinking.UploadRatesBill.fileUploaded()
GET         /evidence-uploaded                                                                @controllers.propertyLinking.UploadEvidence.fileUploaded()
GET         /no-evidence-uploaded                                                             @controllers.propertyLinking.UploadEvidence.noEvidenceUploaded()
GET         /manual-verification-required                                                     @controllers.LinkErrors.manualVerificationRequired()
GET         /linking-conflict                                                                 @controllers.LinkErrors.conflict()

GET         /appoint-agent/select-properties-search                                           @controllers.agentAppointment.AppointAgentController.selectPropertiesSearchSort(pagination: AgentPropertiesParameters)
POST        /appoint-agent/select-properties                                                  @controllers.agentAppointment.AppointAgentController.selectProperties()
POST        /appoint-agent/agent-summary                                                      @controllers.agentAppointment.AppointAgentController.appointAgentSummary()
GET         /appoint-agent/multiple-properties                                                @controllers.agentAppointment.AppointAgentController.appointMultipleProperties()

GET         /revoke-agent/multiple-properties                                                 @controllers.agentAppointment.AppointAgentController.getAgentsForRemove()
POST        /revoke-agent/select-properties                                                   @controllers.agentAppointment.AppointAgentController.selectAgentProperties()
GET         /revoke-agent/select-properties-search                                            @controllers.agentAppointment.AppointAgentController.selectAgentPropertiesSearchSort(pagination: AgentPropertiesParameters)
POST        /revoke-agent/agent-summary                                                       @controllers.agentAppointment.AppointAgentController.revokeAgentSummary()

#AGENT
#Dashboard
#TODO: Move to dashboard
GET         /manage-clients                                                                   @controllers.agent.RepresentationController.viewClientProperties(page: Int ?= 1, pageSize: Int ?= 15, requestTotalRowCount: Boolean ?= true, sortfield: Option[String] ?= None, sortorder: Option[String] ?= None, status: Option[String] ?= None, address: Option[String] ?= None, baref: Option[String] ?= None, client: Option[String] ?= None)

GET         /manage-clients/json                                                              @controllers.agent.RepresentationController.listRepresentationRequest(page: Int, pageSize: Int, requestTotalRowCount: Boolean, sortfield: Option[String], sortorder: Option[String], status: Option[String], address: Option[String], baref: Option[String], client: Option[String])

GET         /manage-clients/pending-requests                                                  @controllers.agent.RepresentationController.pendingRepresentationRequest(page: Int ?= 1, pageSize: Int ?= 15)
POST        /representation-request/confirm                                                   @controllers.agent.RepresentationController.confirm(page: Int, pageSize: Int)
POST        /representation-request/cancel                                                    @controllers.agent.RepresentationController.cancel(page: Int, pageSize: Int)
POST        /representation-request/continue                                                  @controllers.agent.RepresentationController.continue(page: Int, pageSize: Int)
POST        /representation-request/bulkActions                                               @controllers.agent.RepresentationController.bulkActions

GET         /add-user-to-gg                                                                   @controllers.Application.addUserToGG

#Address lookup
GET         /lookup                                                                           @controllers.AddressLookup.findByPostcode(postcode)

#Downtime page
GET         /planned-improvements                                                             @controllers.DowntimePage.plannedImprovements

#Enrolment page
GET         /complete-contact-details                                                         @controllers.registration.RegistrationController.show()
POST        /complete-business-contact-details                                                @controllers.registration.RegistrationController.submitOrganisation()
POST        /complete-existing-business-contact-details                                       @controllers.registration.RegistrationController.submitAdminToExistingOrganisation()
POST        /complete-your-contact-details                                                    @controllers.registration.RegistrationController.submitIndividual()
POST        /complete-business-contact-details-assistant                                      @controllers.registration.RegistrationController.submitAssistant()
GET         /create-success                                                                   @controllers.registration.RegistrationController.success(personId: Long)

#Draft Checks
GET         /draft-cases                                                                      @controllers.ManageDrafts.viewDraftCases()
POST        /delete-draft                                                                     @controllers.ManageDrafts.deleteDraftCase()
POST        /confirm-delete-draft                                                             @controllers.ManageDrafts.confirmDelete(draftId: String)
POST        /continue-draft-check                                                             @controllers.ManageDrafts.continueCheck()

#Business tax account
GET         /manage-business-tax-account                                                      @controllers.Application.manageBusinessTaxAccount()

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                                                                     @controllers.Assets.at(path="/public", file)